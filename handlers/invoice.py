from aiogram import Router, F, Bot
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import CURRENCY

invoice_router = Router()


class InvoiceStates(StatesGroup):
    WAITING_AMOUNT = State()


@invoice_router.message(Command("pay"))
async def start_invoice(message: Message, state: FSMContext):
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:")
    await state.set_state(InvoiceStates.WAITING_AMOUNT)


@invoice_router.message(InvoiceStates.WAITING_AMOUNT)
async def process_amount(message: Message, state: FSMContext, bot: Bot):

    try:
        stars_amount = int(message.text)
        if stars_amount <= 0:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return

        await message.answer_invoice(
            title="–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥",
            description=f"–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ {stars_amount} –∑–≤–µ–∑–¥ Telegram",
            payload="stars_payment",
            provider_token='',
            currency=CURRENCY,
            prices=[
                LabeledPrice(
                    label=f"{stars_amount} Stars",
                    amount=stars_amount
                )
            ]
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@invoice_router.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(query.id, ok=True)


@invoice_router.message(F.successful_payment)
async def payment_success(message: Message):
    await message.answer("üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", message_effect_id='5104841245755180586')